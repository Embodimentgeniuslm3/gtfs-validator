/*
 * Copyright 2020 MobilityData IO
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.mobilitydata.gtfsvalidator.outputcomparator.util;

import com.google.common.collect.Sets;
import com.google.gson.Gson;
import java.io.BufferedReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Collections;
import java.util.Set;
import java.util.TreeSet;

/**
 * Used to encapsulate a {@code ValidationReport}, its reader and the error codes contained in said
 * validation report. Provides convenient methods to retrieve information from a {@code
 * ValidationReport} generated by deserialization.
 */
public class ValidationReportContainer implements AutoCloseable {
  private static final Gson GSON = new Gson();
  private final ValidationReport validationReport;
  private final BufferedReader reader;
  private final Set<String> reportErrorCodes = new TreeSet<>();

  /**
   * Creates a {@code ValidationReportContainer} from a {@code BufferedReader}.
   *
   * @param reader the {@code BufferedReader} used to deserialize a json file.
   */
  private ValidationReportContainer(BufferedReader reader) {
    this(GSON.fromJson(reader, ValidationReport.class), reader);
  }

  /**
   * Creates a {@code ValidationReportContainer} from a {@code ValidationReport}. Defines at
   * construction the collection of error codes contained in the {@code ValidationReport} passed as
   * parameter.
   *
   * @param validationReportReport the {@code ValidationReport} used to deserialize a json file.
   */
  private ValidationReportContainer(
      ValidationReport validationReportReport, BufferedReader reader) {
    this.reader = reader;
    this.validationReport = validationReportReport;
    setErrorCodes();
  }

  /**
   * Creates a {@code ValidationReportContainer} from a {@code Path} to a json file.
   *
   * @param path the path to the json file
   * @return the {@code ValidationReportContainer} that contains the {@code ValidationReport}
   *     related to the json file whose path was passed as parameter.
   */
  public static ValidationReportContainer fromPath(Path path) throws IOException {
    return new ValidationReportContainer(Files.newBufferedReader(path));
  }

  /**
   * Creates a {@code ValidationReportContainer} from a json string.
   *
   * @param jsonString  the json string
   * @return the {@code ValidationReportContainer} that contains the {@code ValidationReport}
   *     related to the json string passed as parameter.
   */
  public static ValidationReportContainer fromJsonString(String jsonString) {
    return new ValidationReportContainer(GSON.fromJson(jsonString, ValidationReport.class), null);
  }

  /**
   * Updates the set of error code with every error codes encountered in the generated {@code
   * ValidationReport} at construction time.
   */
  private void setErrorCodes() {
    for (NoticeAggregate noticeAggregate : validationReport.getNotices()) {
      if (noticeAggregate.isError()) {
        this.reportErrorCodes.add(noticeAggregate.getCode());
      }
    }
  }

  /**
   * The set of error codes contained in the {@code ValidationReport}
   *
   * @return the set of error codes contained in the {@code ValidationReport}
   */
  public Set<String> getErrorCodes() {
    return Collections.unmodifiableSet(reportErrorCodes);
  }

  /**
   * Returns the number of new error codes introduced by the other {@code ValidationReportContainer}
   * passed as parameter, e.g. if this {@code ValidationReportContainer} has the following error
   * codes:
   *
   * <ul>
   *   <li>invalid_phone_number;
   *   <li>number_out_of_range;
   * </ul>
   *
   * and the other {@code ValidationReportContainer} has the following error codes:
   *
   * <ul>
   *   <li>invalid_phone_number;
   *   <li>number_out_of_range;
   *   <li>invalid_email_address;
   *   <li>invalid_url;
   * </ul>
   *
   * <p>then this methods returns 2 as it contains two new errors codes (invalid_email_address,
   * invalid_url) not present in this {@code ValidationReportContainer}
   *
   * @param other the other {@code ValidationReportContainer}
   * @return the number of new error codes introduced by the other {@code ValidationReportContainer}
   *     passed as parameter, e.g. if this {@code ValidationReportContainer} has the following error
   *     codes:
   *     <ul>
   *       <li>invalid_phone_number;
   *       <li>number_out_of_range;
   *     </ul>
   *     and the other {@code ValidationReportContainer} has the following error codes:
   *     <ul>
   *       <li>invalid_phone_number;
   *       <li>number_out_of_range;
   *       <li>invalid_email_address;
   *       <li>invalid_url;
   *     </ul>
   *     <p>then this methods returns 2 as it contains two new errors codes (invalid_email_address,
   *     invalid_url) not present in this {@code ValidationReportContainer}
   */
  public int getNewErrorCount(ValidationReportContainer other) {
    return Sets.difference(other.getErrorCodes(), getErrorCodes()).size();
  }

  /**
   * Returns the {@code ValidationReport} created at construction
   *
   * @return the {@code ValidationReport} created at construction
   */
  public ValidationReport getValidationReport() {
    return validationReport;
  }

  /**
   * Compares two validation reports containers: returns true if they contain the same set of error
   * codes.
   *
   * @param other the other {@code ValidationReportContainer}.
   * @return true if thw two {@code ValidationReportContainer} contain the same set of error codes,
   *     false otherwise.
   */
  public boolean hasSameErrorCodes(ValidationReportContainer other) {
    return getErrorCodes().equals(other.getErrorCodes());
  }

  @Override
  public void close() throws IOException {
    if (reader == null) {
      return;
    }
    reader.close();
  }
}
