name: Integration tests

on:
  push:
    branches: [ master, new-test-module ]

jobs:
  pack-latest-changes:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
      - uses: actions/checkout@v1
      - name: Prepare version name
        id: prep
        run: |
          VERSION_TAG=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION_TAG=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION_TAG=-$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION_TAG=-pr-${{ github.event.number }}
          fi
          if [ ${VERSION_TAG} != ${GITHUB_REF#refs/tags/} ]; then
            VERSION_TAG=v${VERSION_TAG}-sha-${GITHUB_SHA::8}-SNAPSHOT
          fi
          echo ::set-output name=versionTag::${VERSION_TAG}
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Package cli app jar with Gradle
        uses: eskatos/gradle-command-action@v1
        env:
          versionTag: ${{ steps.prep.outputs.versionTag }}
        with:
          arguments: shadowJar
      - name: Persist cli app jar
        uses: actions/upload-artifact@v2
        with:
          name: gtfs-validator-${{ steps.prep.outputs.versionTag }}_cli
          path: main/build/libs/gtfs-validator-${{ steps.prep.outputs.versionTag }}_cli.jar
    outputs:
      versionTag: ${{ steps.prep.outputs.versionTag }}
  download-latest-gtfs-validator-release-jar:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
      - uses: actions/checkout@v1
      - name: Download last release of the validator
        uses: suisei-cn/actions-download-file@v1
        id: gtfs-validator
        with:
          url: "https://github.com/MobilityData/gtfs-validator/releases/download/v2.0.0/gtfs-validator-v2.0.0_cli.jar"
          target: public/
  fetch-urls:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
      - name: Get url list as json
        id: set-matrix
        # The below outputs a JSON array and uses GitHub Actions magic (::set-output) to set
        # an output variable
        run: |
          URLS=$(curl https://hello-gtfs-validator.free.beeceptor.com/urls)
          echo $URLS
          echo "::set-output name=matrix::$URLS"
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
  loop-check:
    needs: [ fetch-urls, pack-latest-changes ]
    strategy:
      matrix: ${{ fromJson(needs.fetch-urls.outputs.matrix) }}
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: gtfs-validator-${{ needs.pack-latest-changes.outputs.versionTag }}_cli
          path: main/build/libs/gtfs-validator-${{ needs.pack-latest-changes.outputs.versionTag }}_cli.jar
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Echo items in list (for loop using Github Action strategy)
        run: |
          ls main/build/libs/
          unzip gtfs-validator-${{ needs.pack-latest-changes.outputs.versionTag }}_cli
          pwd
#          echo ls main/build/libs/
#          java -jar main/build/libs/*.jar -u ${{ matrix.urls }} -o output
#          #TODO: execute latest validator version and store the validation reports
#          #TODO: calculate hash code for each dataset and compare to what is in the archive
#          #TODO: if hashes are different execute v2.0 on the dataset and compare the two outputs
#          #TODO: else, compare the two outputs (one from the archive, the other one from this action)
